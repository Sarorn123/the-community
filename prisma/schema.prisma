// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role       @default(USER)
  accounts      Account[]
  sessions      Session[]
  questions     Question[]
  comment       Comment[]
  replys        Reply[]
  votes         Vote[]
}

model Question {
  id        String    @id @default(cuid())
  title     String
  content   String?   @db.Text
  image     String?
  totalVote Int       @default(0)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment[]
  tages     String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  votes     Vote[]
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  replys     Reply[]
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  isCorrect Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  voteType   VoteType
}
